// Use constructor class to generate the HTML for each object in the data array. Array was generated by processing API response.
class GalleryItem {
    // Define properties for each instance.
    constructor(objectInArray) {
        this.steamAppID = objectInArray.steamAppID;
        this.gameID = objectInArray.gameID;
        this.thumb = objectInArray.thumb;
        this.title = objectInArray.title;
        this.metacriticLink = objectInArray.metacriticLink;
        this.metacriticScore = objectInArray.metacriticScore;
        this.steamRatingPercent = objectInArray.steamRatingPercent;
        this.dealRating = objectInArray.dealRating;
        this.dealID = objectInArray.dealID;
        this.salePrice = objectInArray.salePrice;
        this.normalPrice = objectInArray.normalPrice;
        this.savings = Math.round(parseFloat(objectInArray.savings));
    }
    // Define generateHtml method for each instance. Allows for HTML generation using the properties created by the constructor.
    generateHtml() {
        return `
            <div class="gallery-item" data-steamid="${this.steamAppID}" data-gameid="${this.gameID}">
                <div class="image-container">
                    <img src="${this.thumb}" alt="${this.title}" onerror="missingImage(this)">
                    <div class="overlay">
                        <div class="overlay-content">
                            <p>${this.title}</p>
                            <a href="https://www.metacritic.com${this.metacriticLink}">Metacritic: ${this.metacriticScore}</a>
                            <p>Steam rating: ${this.steamRatingPercent}</p>
                            <p>Deal rating: ${this.dealRating}</p>
                            <a href="https://www.cheapshark.com/redirect?dealID=${this.dealID}">See the deal!</a>
                        </div>
                    </div>
                </div>
                <div class="item-footer">
                    <div class="game-details">
                        <div class="savings">-${this.savings}%</div>
                        <div class="prices">
                            <div class="salePrice">$${this.salePrice}</div>
                            <div class="normalPrice">$${this.normalPrice}</div>
                        </div>
                    </div>
                    <div class="heart">
                        &#9829;
                    </div>
                </div>
            </div>
        `;
    }
}
// Request options necessary to make API call.
let requestOptions = {
    method: 'GET',
    redirect: 'follow'
};

// Check if storedDealsData exists and is not null. Initialize dealsData array to allow steam ID retrieval and storage. 
let storedDealsData = localStorage.getItem('dealsData');
let dealsData = storedDealsData && storedDealsData !== "null" ? JSON.parse(storedDealsData) : [];

// Check if storedFavorites exists and is not null. Initialize favorites array to allow steam ID retrieval and storage. 
let storedFavorites = localStorage.getItem('favorites');
let favorites = storedFavorites && storedFavorites !== "null" ? JSON.parse(storedFavorites) : [];
// let favorites = JSON.parse(localStorage.getItem('favorites')) || [];

// Make API call. For each object in data, append the HTML generated by each instance of GalleryItem after sanitizing.
fetch("https://www.cheapshark.com/api/1.0/deals?storeID=1&sortBy=Metacritic&desc=0&onSale=1", requestOptions)
    .then(response => response.json())
    .then(data => {
        localStorage.setItem('dealsData', JSON.stringify(data));
        data.forEach(objectInArray => {
            let galleryItem = new GalleryItem(objectInArray);
            // console.log(galleryItem);
            let galleryItemHtml = galleryItem.generateHtml()
            // console.log(galleryItemHtml);
            let galleryItemHtmlClean = DOMPurify.sanitize(galleryItemHtml)
            // console.log(galleryItemHtmlClean);
            $('.gallery').append(galleryItemHtmlClean);
        });
        // Event delegation for dynamic content.
        // Overlay and links (Need to keep referer to comply with cheapshark API). Due to sanitizing, HTML attributes are added until this stage.
        $('.gallery').on('click', '.image-container', function() {
            $(this).find('.overlay').show();
            $(this).find('.overlay a').attr({
                'target': '_blank',
                'rel': 'noopener'
            });
        });
        $('.gallery').on('click', '.overlay', function(event) {
            event.stopPropagation();
            $(this).hide();
        });
        // Adding and removing favorites as well as updating game id for wishlist.
        $('.gallery').on('click', '.heart', function(event) {
            event.stopPropagation();
            $(this).toggleClass('red-heart');



            let gameID = $(this).closest('.gallery-item').data('gameid');
            // let gameData = {};
            let gameIndex = -1;

            for (let i = 0; i < favorites.length; i++) {
                if (favorites[i].gameID == gameID) {
                    gameIndex = i;
                    break;
                }
            }

            if (gameIndex === -1) {
                for (let i = 0; i < dealsData.length; i++) {
                    if (dealsData[i].gameID == gameID) {
                        let galleryItem = new GalleryItem(dealsData[i]);
                        // console.log(galleryItem);
                        favorites.push(galleryItem);


                        ////////////////////// Current issue: Favorites only save to local storage if a favorites array already exists.


/*                         ///////////////////// Test
                        if (favorites === null) {
                            favorites = galleryItem;
                        } else {
                            favorites.push(galleryItem);
                        } */

                        // Object.assign(gameData, dealsData[i]);
                        // gameData = dealsData[i];
                        // console.log(gameData);
                        break;
                    }
                    // favorites.push(gameData);
                }
            } else {
                favorites.splice(gameIndex, 1);
            }
            localStorage.setItem('favorites', JSON.stringify(favorites));



/*             let steamID = $(this).closest('.gallery-item').data('steamid');
            let index = favorites.indexOf(steamID);
            if (index === -1) {
                favorites.push(steamID);
            } else {
                favorites.splice(index, 1);
            }
            localStorage.setItem('favorites', JSON.stringify(favorites));
            // Game ID's
            let gameID = $(this).closest('.gallery-item').data('gameid');
            let indexGameId = gameIds.indexOf(gameID);
            if (indexGameId === -1) {
                gameIds.push(gameID);
            } else {
                gameIds.splice(index, 1);
            }
            localStorage.setItem('gameids', JSON.stringify(gameIds)); */
        });
    })
    .catch(error => {
        console.log('error', error);
    });
// Check for broken links (HTML image elements) and display favoite games as "hearted".
$(window).on('load', function() {
    $('img').each(function() {
        if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
            this.src = './assets/images/missing.png';
        }
    });
    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    $('.gallery-item').each(function() {
        let steamID = $(this).data('steamid');
        if (favorites.includes(steamID)) {
            $(this).find('.heart').addClass('red-heart');
        }
    });
});